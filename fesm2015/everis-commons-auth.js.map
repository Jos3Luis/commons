{"version":3,"file":"everis-commons-auth.js.map","sources":["ng://everiscommons/auth/lib/auth.services.ts","ng://everiscommons/auth/lib/auth.token.ts","ng://everiscommons/auth/lib/auth-rules.dto.ts","ng://everiscommons/auth/lib/interceptors/TokenInterceptor.services.ts","ng://everiscommons/auth/lib/auth.module.ts"],"sourcesContent":["import {\n  IAuthRequest,\n  CoreAuthorizerManager,\n  IAuthorizer,\n  IOAuthCredentials,\n  IJwtCredentials,\n  IAuthrules,\n} from 'everiscore';\n\nexport class Authorization extends CoreAuthorizerManager {\n\n  rules: IAuthrules;\n\n  type: string;\n\n  authorizer: IAuthorizer;\n\n  authServices: IAuthRequest;\n\n  credentials: IOAuthCredentials | IJwtCredentials;\n\n  constructor(private _rules: IAuthrules,\n    private _authorizer: IAuthorizer,\n    private _authServices: IAuthRequest) {\n    super();\n    this.rules = this._rules;\n    this.authorizer = this._authorizer;\n    this.authServices = this._authServices;\n    this.type = this.rules.auth;\n    this.credentials = this.rules.credentials || {};\n  }\n}\n","import { InjectionToken, Injectable } from '@angular/core';\nimport { IAuthRequest, IAuthrules, IAuthIdentity } from 'everiscore';\nimport { Observable } from 'rxjs/Observable';\n\nexport const AuthRules = new InjectionToken<IAuthrules>('authRules');\n\n// export const AuthServices = new InjectionToken<IAuthRequest>('authServices');\n@Injectable()\nexport class AuthServices implements IAuthRequest {\n  getToken(user: any, password: any): Observable<IAuthIdentity> {\n    throw new Error('Method not implemented.');\n  }\n  refreshToken(token: string, done: Function): void {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { IAuthrules } from 'everiscore';\n\nexport class RulesDTO {\n  constructor(private rules: IAuthrules) {\n    this.setIterceptor();\n    this.setTypeToken();\n    this.setHeaderName();\n  }\n\n  prepare(): IAuthrules {\n    return this.rules;\n  }\n\n  private setIterceptor() {\n    this.rules['interceptor'] = this.rules.hasOwnProperty('interceptor') ? this.rules.interceptor : true;\n  }\n\n  private setTypeToken() {\n    this.rules['typeToken'] = this.rules.hasOwnProperty('typeToken') ? this.rules.typeToken : 'Bearer';\n  }\n  private setHeaderName() {\n    this.rules['headerName'] = this.rules.hasOwnProperty('headerName') ? this.rules.headerName : 'Authorization';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Authorization } from '../auth.services';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  constructor(public auth: Authorization) { }\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler,\n  ) {\n    const authorizer: any = this.auth.getAuthorizer() || null;\n    if (authorizer && this.auth.rules.interceptor) {\n      const token = authorizer.getToken();\n      const headers = JSON.parse('{\"' + this.auth.rules.headerName + '\":\"' + this.auth.rules.typeToken + ' ' + token + '\"}');\n      if (token !== '') {\n        req = req.clone({\n          setHeaders: headers,\n        });\n      }\n    }\n    return next.handle(req);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS, HttpClient } from '@angular/common/http';\nimport { IAuthRequest, IAuthrules, CoreAuthorizerFactory } from 'everiscore';\nimport { Authorization } from './auth.services';\nimport { AuthRules, AuthServices } from './auth.token';\nimport { RulesDTO } from './auth-rules.dto';\nimport { TokenInterceptor } from './interceptors/TokenInterceptor.services';\n\nexport { AuthServices, AuthRules } from './auth.token';\nexport { Authorization } from './auth.services';\n\nexport {\n  IAuthRequest,\n  IAuthResponse,\n  IAuthrules,\n  IAuthIdentity,\n} from 'everiscore';\n\nexport function factoryFnAuth(authRules: IAuthrules, authServices: IAuthRequest) {\n  // TODO: Corregir declaraciÃ³n any\n  const rules = new RulesDTO(authRules).prepare();\n  const autorizer = CoreAuthorizerFactory(authRules.auth as any);\n  return new Authorization(rules, autorizer, authServices);\n}\n\n@NgModule({\n  imports: [HttpClientModule],\n})\nexport class EvAuth {\n  static forRoot(rules: IAuthrules): ModuleWithProviders {\n\n    return {\n      ngModule: EvAuth,\n      providers: [\n        {\n          provide: AuthServices,\n          useClass: rules.model || AuthServices,\n        },\n        { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\n        {\n          provide: AuthRules,\n          useValue: rules,\n        },\n        {\n          provide: Authorization,\n          useFactory: factoryFnAuth,\n          deps: [AuthRules, AuthServices],\n        },\n      ],\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
